# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _pyMarmoteMDP
else:
    import _pyMarmoteMDP

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



def new_intTab(nelements):
    return _pyMarmoteMDP.new_intTab(nelements)

def delete_intTab(ary):
    return _pyMarmoteMDP.delete_intTab(ary)

def intTab_getitem(ary, index):
    return _pyMarmoteMDP.intTab_getitem(ary, index)

def intTab_setitem(ary, index, value):
    return _pyMarmoteMDP.intTab_setitem(ary, index, value)
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyMarmoteMDP.delete_SwigPyIterator

    def value(self):
        return _pyMarmoteMDP.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _pyMarmoteMDP.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _pyMarmoteMDP.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _pyMarmoteMDP.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _pyMarmoteMDP.SwigPyIterator_equal(self, x)

    def copy(self):
        return _pyMarmoteMDP.SwigPyIterator_copy(self)

    def next(self):
        return _pyMarmoteMDP.SwigPyIterator_next(self)

    def __next__(self):
        return _pyMarmoteMDP.SwigPyIterator___next__(self)

    def previous(self):
        return _pyMarmoteMDP.SwigPyIterator_previous(self)

    def advance(self, n):
        return _pyMarmoteMDP.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _pyMarmoteMDP.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _pyMarmoteMDP.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _pyMarmoteMDP.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _pyMarmoteMDP.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _pyMarmoteMDP.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _pyMarmoteMDP.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _pyMarmoteMDP:
_pyMarmoteMDP.SwigPyIterator_swigregister(SwigPyIterator)

class marmoteSet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    UNION = _pyMarmoteMDP.marmoteSet_UNION
    PRODUCT = _pyMarmoteMDP.marmoteSet_PRODUCT
    SIMPLE = _pyMarmoteMDP.marmoteSet_SIMPLE

    def __init__(self, *args):
        _pyMarmoteMDP.marmoteSet_swiginit(self, _pyMarmoteMDP.new_marmoteSet(*args))
    __swig_destroy__ = _pyMarmoteMDP.delete_marmoteSet

    def cardinal(self):
        return _pyMarmoteMDP.marmoteSet_cardinal(self)

    def isFinite(self):
        return _pyMarmoteMDP.marmoteSet_isFinite(self)

    def isSimple(self):
        return _pyMarmoteMDP.marmoteSet_isSimple(self)

    def isUnion(self):
        return _pyMarmoteMDP.marmoteSet_isUnion(self)

    def isProduct(self):
        return _pyMarmoteMDP.marmoteSet_isProduct(self)

    def totNbDims(self):
        return _pyMarmoteMDP.marmoteSet_totNbDims(self)

    def enumerate(self):
        return _pyMarmoteMDP.marmoteSet_enumerate(self)

    def test_index_decode(self):
        return _pyMarmoteMDP.marmoteSet_test_index_decode(self)

    def firstState(self, buffer):
        return _pyMarmoteMDP.marmoteSet_firstState(self, buffer)

    def nextState(self, buffer):
        return _pyMarmoteMDP.marmoteSet_nextState(self, buffer)

    def decodeState(self, index, buffer):
        return _pyMarmoteMDP.marmoteSet_decodeState(self, index, buffer)

    def index(self, buffer):
        return _pyMarmoteMDP.marmoteSet_index(self, buffer)

    def isZero(self, buffer):
        return _pyMarmoteMDP.marmoteSet_isZero(self, buffer)

    def printState(self, *args):
        return _pyMarmoteMDP.marmoteSet_printState(self, *args)

    def nextStatebyDim(self, buffer, dim):
        return _pyMarmoteMDP.marmoteSet_nextStatebyDim(self, buffer, dim)

    def firstStatebyDim(self, buffer, dim):
        return _pyMarmoteMDP.marmoteSet_firstStatebyDim(self, buffer, dim)

    def cardinalbyDim(self, dim):
        return _pyMarmoteMDP.marmoteSet_cardinalbyDim(self, dim)

    def nextStateOutDim(self, buffer, dim):
        return _pyMarmoteMDP.marmoteSet_nextStateOutDim(self, buffer, dim)

    def firstStateOutDim(self, buffer, dim):
        return _pyMarmoteMDP.marmoteSet_firstStateOutDim(self, buffer, dim)

    def cardinalOutDim(self, dim):
        return _pyMarmoteMDP.marmoteSet_cardinalOutDim(self, dim)

# Register marmoteSet in _pyMarmoteMDP:
_pyMarmoteMDP.marmoteSet_swigregister(marmoteSet)

class marmoteInterval(marmoteSet):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, min, max):
        _pyMarmoteMDP.marmoteInterval_swiginit(self, _pyMarmoteMDP.new_marmoteInterval(min, max))
    __swig_destroy__ = _pyMarmoteMDP.delete_marmoteInterval

    def isFinite(self):
        return _pyMarmoteMDP.marmoteInterval_isFinite(self)

    def isZero(self, buffer):
        return _pyMarmoteMDP.marmoteInterval_isZero(self, buffer)

    def firstState(self, buffer):
        return _pyMarmoteMDP.marmoteInterval_firstState(self, buffer)

    def nextState(self, buffer):
        return _pyMarmoteMDP.marmoteInterval_nextState(self, buffer)

    def decodeState(self, index, buffer):
        return _pyMarmoteMDP.marmoteInterval_decodeState(self, index, buffer)

    def index(self, buffer):
        return _pyMarmoteMDP.marmoteInterval_index(self, buffer)

    def printState(self, out, buffer):
        return _pyMarmoteMDP.marmoteInterval_printState(self, out, buffer)

# Register marmoteInterval in _pyMarmoteMDP:
_pyMarmoteMDP.marmoteInterval_swigregister(marmoteInterval)

class marmoteBox(marmoteSet):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyMarmoteMDP.marmoteBox_swiginit(self, _pyMarmoteMDP.new_marmoteBox(*args))
    __swig_destroy__ = _pyMarmoteMDP.delete_marmoteBox

    def isFinite(self):
        return _pyMarmoteMDP.marmoteBox_isFinite(self)

    def isZero(self, buffer):
        return _pyMarmoteMDP.marmoteBox_isZero(self, buffer)

    def firstState(self, buffer):
        return _pyMarmoteMDP.marmoteBox_firstState(self, buffer)

    def nextState(self, buffer):
        return _pyMarmoteMDP.marmoteBox_nextState(self, buffer)

    def decodeState(self, index, buf):
        return _pyMarmoteMDP.marmoteBox_decodeState(self, index, buf)

    def index(self, buf):
        return _pyMarmoteMDP.marmoteBox_index(self, buf)

    def printState(self, out, buffer):
        return _pyMarmoteMDP.marmoteBox_printState(self, out, buffer)

    def nextStatebyDim(self, buffer, dim):
        return _pyMarmoteMDP.marmoteBox_nextStatebyDim(self, buffer, dim)

    def firstStatebyDim(self, buffer, dim):
        return _pyMarmoteMDP.marmoteBox_firstStatebyDim(self, buffer, dim)

    def cardinalbyDim(self, dim):
        return _pyMarmoteMDP.marmoteBox_cardinalbyDim(self, dim)

    def nextStateOutDim(self, buffer, dim):
        return _pyMarmoteMDP.marmoteBox_nextStateOutDim(self, buffer, dim)

    def firstStateOutDim(self, buffer, dim):
        return _pyMarmoteMDP.marmoteBox_firstStateOutDim(self, buffer, dim)

    def cardinalOutDim(self, dim):
        return _pyMarmoteMDP.marmoteBox_cardinalOutDim(self, dim)

# Register marmoteBox in _pyMarmoteMDP:
_pyMarmoteMDP.marmoteBox_swigregister(marmoteBox)

class SCC(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    id = property(_pyMarmoteMDP.SCC_id_get, _pyMarmoteMDP.SCC_id_set)
    period = property(_pyMarmoteMDP.SCC_period_get, _pyMarmoteMDP.SCC_period_set)
    states = property(_pyMarmoteMDP.SCC_states_get, _pyMarmoteMDP.SCC_states_set)

    def __lt__(self, a):
        return _pyMarmoteMDP.SCC___lt__(self, a)

    def __init__(self):
        _pyMarmoteMDP.SCC_swiginit(self, _pyMarmoteMDP.new_SCC())
    __swig_destroy__ = _pyMarmoteMDP.delete_SCC

# Register SCC in _pyMarmoteMDP:
_pyMarmoteMDP.SCC_swigregister(SCC)

class sparseMatrix(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyMarmoteMDP.sparseMatrix_swiginit(self, _pyMarmoteMDP.new_sparseMatrix(*args))
    __swig_destroy__ = _pyMarmoteMDP.delete_sparseMatrix

    def setEntry(self, row, col, val):
        return _pyMarmoteMDP.sparseMatrix_setEntry(self, row, col, val)

    def getEntry(self, arg2, arg3):
        return _pyMarmoteMDP.sparseMatrix_getEntry(self, arg2, arg3)

    def getNbElts(self, row):
        return _pyMarmoteMDP.sparseMatrix_getNbElts(self, row)

    def getCol(self, row, numCol):
        return _pyMarmoteMDP.sparseMatrix_getCol(self, row, numCol)

    def getEntryByCol(self, row, numCol):
        return _pyMarmoteMDP.sparseMatrix_getEntryByCol(self, row, numCol)

    def getTransDistrib(self, row):
        return _pyMarmoteMDP.sparseMatrix_getTransDistrib(self, row)

    def rowSum(self, row):
        return _pyMarmoteMDP.sparseMatrix_rowSum(self, row)

    def evaluateMeasure(self, *args):
        return _pyMarmoteMDP.sparseMatrix_evaluateMeasure(self, *args)

    def evaluateValue(self, v, res):
        return _pyMarmoteMDP.sparseMatrix_evaluateValue(self, v, res)

    def evaluateValueState(self, v, stateIndex):
        return _pyMarmoteMDP.sparseMatrix_evaluateValueState(self, v, stateIndex)

    def copy(self):
        return _pyMarmoteMDP.sparseMatrix_copy(self)

    def uniformize(self):
        return _pyMarmoteMDP.sparseMatrix_uniformize(self)

    def embed(self):
        return _pyMarmoteMDP.sparseMatrix_embed(self)

    def diagnose(self, out):
        return _pyMarmoteMDP.sparseMatrix_diagnose(self, out)

    def write(self, out, format):
        return _pyMarmoteMDP.sparseMatrix_write(self, out, format)

    def addToEntry(self, row, col, val):
        return _pyMarmoteMDP.sparseMatrix_addToEntry(self, row, col, val)

    def normalize(self):
        return _pyMarmoteMDP.sparseMatrix_normalize(self)

# Register sparseMatrix in _pyMarmoteMDP:
_pyMarmoteMDP.sparseMatrix_swigregister(sparseMatrix)

class solutionMDP(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyMarmoteMDP.solutionMDP_swiginit(self, _pyMarmoteMDP.new_solutionMDP())
    __swig_destroy__ = _pyMarmoteMDP.delete_solutionMDP

    def writeSolution(self):
        return _pyMarmoteMDP.solutionMDP_writeSolution(self)

    def writeSolutionByDim(self, d, set):
        return _pyMarmoteMDP.solutionMDP_writeSolutionByDim(self, d, set)

    def setSize(self, s):
        return _pyMarmoteMDP.solutionMDP_setSize(self, s)

# Register solutionMDP in _pyMarmoteMDP:
_pyMarmoteMDP.solutionMDP_swigregister(solutionMDP)

class feedbackSolutionMDP(solutionMDP):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyMarmoteMDP.feedbackSolutionMDP_swiginit(self, _pyMarmoteMDP.new_feedbackSolutionMDP())
    __swig_destroy__ = _pyMarmoteMDP.delete_feedbackSolutionMDP

    def initVectors(self, s):
        return _pyMarmoteMDP.feedbackSolutionMDP_initVectors(self, s)

    def resetValue(self):
        return _pyMarmoteMDP.feedbackSolutionMDP_resetValue(self)

    def setIndAvg(self, b):
        return _pyMarmoteMDP.feedbackSolutionMDP_setIndAvg(self, b)

    def setAction(self, a):
        return _pyMarmoteMDP.feedbackSolutionMDP_setAction(self, a)

    def getAction(self):
        return _pyMarmoteMDP.feedbackSolutionMDP_getAction(self)

    def setValue(self, t):
        return _pyMarmoteMDP.feedbackSolutionMDP_setValue(self, t)

    def getValue(self):
        return _pyMarmoteMDP.feedbackSolutionMDP_getValue(self)

    def setActionIndex(self, indice, value):
        return _pyMarmoteMDP.feedbackSolutionMDP_setActionIndex(self, indice, value)

    def getActionIndex(self, indice):
        return _pyMarmoteMDP.feedbackSolutionMDP_getActionIndex(self, indice)

    def getValueIndex(self, indice):
        return _pyMarmoteMDP.feedbackSolutionMDP_getValueIndex(self, indice)

    def setAvgCost(self, avg):
        return _pyMarmoteMDP.feedbackSolutionMDP_setAvgCost(self, avg)

    def getAvgCost(self):
        return _pyMarmoteMDP.feedbackSolutionMDP_getAvgCost(self)

    def writeSolution(self):
        return _pyMarmoteMDP.feedbackSolutionMDP_writeSolution(self)

    def writeSolutionByDim(self, d, set):
        return _pyMarmoteMDP.feedbackSolutionMDP_writeSolutionByDim(self, d, set)

# Register feedbackSolutionMDP in _pyMarmoteMDP:
_pyMarmoteMDP.feedbackSolutionMDP_swigregister(feedbackSolutionMDP)

class nonStationarySolutionMDP(solutionMDP):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, h, size):
        _pyMarmoteMDP.nonStationarySolutionMDP_swiginit(self, _pyMarmoteMDP.new_nonStationarySolutionMDP(h, size))
    __swig_destroy__ = _pyMarmoteMDP.delete_nonStationarySolutionMDP

    def writeSolution(self):
        return _pyMarmoteMDP.nonStationarySolutionMDP_writeSolution(self)

    def setAction(self, a):
        return _pyMarmoteMDP.nonStationarySolutionMDP_setAction(self, a)

    def setActionAtStep(self, step, t):
        return _pyMarmoteMDP.nonStationarySolutionMDP_setActionAtStep(self, step, t)

    def setActionAtStepIndex(self, step, indice, action_op):
        return _pyMarmoteMDP.nonStationarySolutionMDP_setActionAtStepIndex(self, step, indice, action_op)

    def getAction(self):
        return _pyMarmoteMDP.nonStationarySolutionMDP_getAction(self)

    def getActionAtStep(self, step):
        return _pyMarmoteMDP.nonStationarySolutionMDP_getActionAtStep(self, step)

    def getActionAtStepIndex(self, step, index):
        return _pyMarmoteMDP.nonStationarySolutionMDP_getActionAtStepIndex(self, step, index)

    def setValue(self, t):
        return _pyMarmoteMDP.nonStationarySolutionMDP_setValue(self, t)

    def setValueAtStep(self, step, t):
        return _pyMarmoteMDP.nonStationarySolutionMDP_setValueAtStep(self, step, t)

    def setValueAtStepIndex(self, step, indice, value_op):
        return _pyMarmoteMDP.nonStationarySolutionMDP_setValueAtStepIndex(self, step, indice, value_op)

    def getValue(self):
        return _pyMarmoteMDP.nonStationarySolutionMDP_getValue(self)

    def getValueAtStep(self, step):
        return _pyMarmoteMDP.nonStationarySolutionMDP_getValueAtStep(self, step)

    def getValueAtStepIndex(self, step, index):
        return _pyMarmoteMDP.nonStationarySolutionMDP_getValueAtStepIndex(self, step, index)

    def getHorizon(self):
        return _pyMarmoteMDP.nonStationarySolutionMDP_getHorizon(self)

    def writeSolutionByDim(self, d, set):
        return _pyMarmoteMDP.nonStationarySolutionMDP_writeSolutionByDim(self, d, set)

    def writeSolutionAtStep(self, s):
        return _pyMarmoteMDP.nonStationarySolutionMDP_writeSolutionAtStep(self, s)

    def writeSolutionAtStepByDim(self, s, d, set):
        return _pyMarmoteMDP.nonStationarySolutionMDP_writeSolutionAtStepByDim(self, s, d, set)

# Register nonStationarySolutionMDP in _pyMarmoteMDP:
_pyMarmoteMDP.nonStationarySolutionMDP_swigregister(nonStationarySolutionMDP)

class feedbackQValueMDP(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, s, a):
        _pyMarmoteMDP.feedbackQValueMDP_swiginit(self, _pyMarmoteMDP.new_feedbackQValueMDP(s, a))
    __swig_destroy__ = _pyMarmoteMDP.delete_feedbackQValueMDP

    def setValueIndex(self, indice, action, value):
        return _pyMarmoteMDP.feedbackQValueMDP_setValueIndex(self, indice, action, value)

    def getValueIndex(self, indice, action):
        return _pyMarmoteMDP.feedbackQValueMDP_getValueIndex(self, indice, action)

    def writeQValue(self):
        return _pyMarmoteMDP.feedbackQValueMDP_writeQValue(self)

    def reset(self):
        return _pyMarmoteMDP.feedbackQValueMDP_reset(self)

    def epsilonGreedy(self, s, espilon):
        return _pyMarmoteMDP.feedbackQValueMDP_epsilonGreedy(self, s, espilon)

    def boltzmann(self, s, T):
        return _pyMarmoteMDP.feedbackQValueMDP_boltzmann(self, s, T)

# Register feedbackQValueMDP in _pyMarmoteMDP:
_pyMarmoteMDP.feedbackQValueMDP_swigregister(feedbackQValueMDP)

class sparseMatrixVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pyMarmoteMDP.sparseMatrixVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyMarmoteMDP.sparseMatrixVector___nonzero__(self)

    def __bool__(self):
        return _pyMarmoteMDP.sparseMatrixVector___bool__(self)

    def __len__(self):
        return _pyMarmoteMDP.sparseMatrixVector___len__(self)

    def __getslice__(self, i, j):
        return _pyMarmoteMDP.sparseMatrixVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyMarmoteMDP.sparseMatrixVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyMarmoteMDP.sparseMatrixVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyMarmoteMDP.sparseMatrixVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyMarmoteMDP.sparseMatrixVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyMarmoteMDP.sparseMatrixVector___setitem__(self, *args)

    def pop(self):
        return _pyMarmoteMDP.sparseMatrixVector_pop(self)

    def append(self, x):
        return _pyMarmoteMDP.sparseMatrixVector_append(self, x)

    def empty(self):
        return _pyMarmoteMDP.sparseMatrixVector_empty(self)

    def size(self):
        return _pyMarmoteMDP.sparseMatrixVector_size(self)

    def swap(self, v):
        return _pyMarmoteMDP.sparseMatrixVector_swap(self, v)

    def begin(self):
        return _pyMarmoteMDP.sparseMatrixVector_begin(self)

    def end(self):
        return _pyMarmoteMDP.sparseMatrixVector_end(self)

    def rbegin(self):
        return _pyMarmoteMDP.sparseMatrixVector_rbegin(self)

    def rend(self):
        return _pyMarmoteMDP.sparseMatrixVector_rend(self)

    def clear(self):
        return _pyMarmoteMDP.sparseMatrixVector_clear(self)

    def get_allocator(self):
        return _pyMarmoteMDP.sparseMatrixVector_get_allocator(self)

    def pop_back(self):
        return _pyMarmoteMDP.sparseMatrixVector_pop_back(self)

    def erase(self, *args):
        return _pyMarmoteMDP.sparseMatrixVector_erase(self, *args)

    def __init__(self, *args):
        _pyMarmoteMDP.sparseMatrixVector_swiginit(self, _pyMarmoteMDP.new_sparseMatrixVector(*args))

    def push_back(self, x):
        return _pyMarmoteMDP.sparseMatrixVector_push_back(self, x)

    def front(self):
        return _pyMarmoteMDP.sparseMatrixVector_front(self)

    def back(self):
        return _pyMarmoteMDP.sparseMatrixVector_back(self)

    def assign(self, n, x):
        return _pyMarmoteMDP.sparseMatrixVector_assign(self, n, x)

    def resize(self, *args):
        return _pyMarmoteMDP.sparseMatrixVector_resize(self, *args)

    def insert(self, *args):
        return _pyMarmoteMDP.sparseMatrixVector_insert(self, *args)

    def reserve(self, n):
        return _pyMarmoteMDP.sparseMatrixVector_reserve(self, n)

    def capacity(self):
        return _pyMarmoteMDP.sparseMatrixVector_capacity(self)
    __swig_destroy__ = _pyMarmoteMDP.delete_sparseMatrixVector

# Register sparseMatrixVector in _pyMarmoteMDP:
_pyMarmoteMDP.sparseMatrixVector_swigregister(sparseMatrixVector)

class genericMDP(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def writeMDP(self):
        return _pyMarmoteMDP.genericMDP_writeMDP(self)
    __swig_destroy__ = _pyMarmoteMDP.delete_genericMDP

    def cost_perStage(self, rews):
        return _pyMarmoteMDP.genericMDP_cost_perStage(self, rews)

    def clearRew(self):
        return _pyMarmoteMDP.genericMDP_clearRew(self)

    def addMatrix(self, i, spM):
        return _pyMarmoteMDP.genericMDP_addMatrix(self, i, spM)

    def deleMatrix(self, i):
        return _pyMarmoteMDP.genericMDP_deleMatrix(self, i)

    def valueIteration(self, epsilon, maxIter):
        return _pyMarmoteMDP.genericMDP_valueIteration(self, epsilon, maxIter)

    def valueIterationGS(self, epsilon, maxIter):
        return _pyMarmoteMDP.genericMDP_valueIterationGS(self, epsilon, maxIter)

    def policyIterationModified(self, epsilon, maxIter, delta, moyIter):
        return _pyMarmoteMDP.genericMDP_policyIterationModified(self, epsilon, maxIter, delta, moyIter)

    def policyIteration(self, maxIter):
        return _pyMarmoteMDP.genericMDP_policyIteration(self, maxIter)

    def policyCost(self, policy, epsilon, maxIter):
        return _pyMarmoteMDP.genericMDP_policyCost(self, policy, epsilon, maxIter)

    def getChain(self, policy):
        return _pyMarmoteMDP.genericMDP_getChain(self, policy)

# Register genericMDP in _pyMarmoteMDP:
_pyMarmoteMDP.genericMDP_swigregister(genericMDP)

class totalRewardMDP(genericMDP):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyMarmoteMDP.totalRewardMDP_swiginit(self, _pyMarmoteMDP.new_totalRewardMDP(*args))
    __swig_destroy__ = _pyMarmoteMDP.delete_totalRewardMDP

    def writeMDP(self):
        return _pyMarmoteMDP.totalRewardMDP_writeMDP(self)

    def valueIteration(self, epsilon, maxIter):
        return _pyMarmoteMDP.totalRewardMDP_valueIteration(self, epsilon, maxIter)

    def valueIterationGS(self, epsilon, maxIter):
        return _pyMarmoteMDP.totalRewardMDP_valueIterationGS(self, epsilon, maxIter)

    def policyIteration(self, maxIter):
        return _pyMarmoteMDP.totalRewardMDP_policyIteration(self, maxIter)

    def policyIterationModified(self, epsilon, maxIter, delta, maxInIter):
        return _pyMarmoteMDP.totalRewardMDP_policyIterationModified(self, epsilon, maxIter, delta, maxInIter)

    def policyCost(self, policy, epsilon, maxIter):
        return _pyMarmoteMDP.totalRewardMDP_policyCost(self, policy, epsilon, maxIter)

    def getChain(self, policy):
        return _pyMarmoteMDP.totalRewardMDP_getChain(self, policy)

# Register totalRewardMDP in _pyMarmoteMDP:
_pyMarmoteMDP.totalRewardMDP_swigregister(totalRewardMDP)

class discountedMDP(genericMDP):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def writeMDP(self):
        return _pyMarmoteMDP.discountedMDP_writeMDP(self)

    def __init__(self, *args):
        _pyMarmoteMDP.discountedMDP_swiginit(self, _pyMarmoteMDP.new_discountedMDP(*args))
    __swig_destroy__ = _pyMarmoteMDP.delete_discountedMDP

    def valueIterationGS(self, epsilon, maxIter):
        return _pyMarmoteMDP.discountedMDP_valueIterationGS(self, epsilon, maxIter)

    def policyIterationModifiedGS(self, epsilon, maxIter, delta, maxInIter):
        return _pyMarmoteMDP.discountedMDP_policyIterationModifiedGS(self, epsilon, maxIter, delta, maxInIter)

    def policyIteration(self, maxIter):
        return _pyMarmoteMDP.discountedMDP_policyIteration(self, maxIter)

    def policyCost(self, policy, epsilon, maxIter):
        return _pyMarmoteMDP.discountedMDP_policyCost(self, policy, epsilon, maxIter)

    def policyCostbyIndex(self, policy, epsilon, maxIter):
        return _pyMarmoteMDP.discountedMDP_policyCostbyIndex(self, policy, epsilon, maxIter)

    def valueIteration(self, *args):
        return _pyMarmoteMDP.discountedMDP_valueIteration(self, *args)

    def policyIterationModified(self, *args):
        return _pyMarmoteMDP.discountedMDP_policyIterationModified(self, *args)

    def Qfunction(self, policy):
        return _pyMarmoteMDP.discountedMDP_Qfunction(self, policy)

    def getChain(self, policy):
        return _pyMarmoteMDP.discountedMDP_getChain(self, policy)

# Register discountedMDP in _pyMarmoteMDP:
_pyMarmoteMDP.discountedMDP_swigregister(discountedMDP)

class averageMDP(genericMDP):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def writeMDP(self):
        return _pyMarmoteMDP.averageMDP_writeMDP(self)

    def __init__(self, *args):
        _pyMarmoteMDP.averageMDP_swiginit(self, _pyMarmoteMDP.new_averageMDP(*args))
    __swig_destroy__ = _pyMarmoteMDP.delete_averageMDP

    def changeIndex(self, index):
        return _pyMarmoteMDP.averageMDP_changeIndex(self, index)

    def valueIteration(self, epsilon, maxIter):
        return _pyMarmoteMDP.averageMDP_valueIteration(self, epsilon, maxIter)

    def relativeValueIteration(self, epsilon, maxIter):
        return _pyMarmoteMDP.averageMDP_relativeValueIteration(self, epsilon, maxIter)

    def policyIteration(self, maxIter):
        return _pyMarmoteMDP.averageMDP_policyIteration(self, maxIter)

    def valueIterationGS(self, epsilon, maxIter):
        return _pyMarmoteMDP.averageMDP_valueIterationGS(self, epsilon, maxIter)

    def policyCost(self, policy, epsilon, maxIter):
        return _pyMarmoteMDP.averageMDP_policyCost(self, policy, epsilon, maxIter)

    def policyIterationModified(self, epsilon, maxIter, delta, maxInIter):
        return _pyMarmoteMDP.averageMDP_policyIterationModified(self, epsilon, maxIter, delta, maxInIter)

    def policyIterationModifiedAA(self, epsilon, maxIter, delta, maxInIter):
        return _pyMarmoteMDP.averageMDP_policyIterationModifiedAA(self, epsilon, maxIter, delta, maxInIter)

    def getChain(self, policy):
        return _pyMarmoteMDP.averageMDP_getChain(self, policy)

# Register averageMDP in _pyMarmoteMDP:
_pyMarmoteMDP.averageMDP_swigregister(averageMDP)

class finiteHorizonMDP(genericMDP):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def writeMDP(self):
        return _pyMarmoteMDP.finiteHorizonMDP_writeMDP(self)

    def __init__(self, *args):
        _pyMarmoteMDP.finiteHorizonMDP_swiginit(self, _pyMarmoteMDP.new_finiteHorizonMDP(*args))
    __swig_destroy__ = _pyMarmoteMDP.delete_finiteHorizonMDP

    def valueIteration(self, *args):
        return _pyMarmoteMDP.finiteHorizonMDP_valueIteration(self, *args)

    def valueIterationGS(self, epsilon, maxIter):
        return _pyMarmoteMDP.finiteHorizonMDP_valueIterationGS(self, epsilon, maxIter)

    def policyIterationModified(self, epsilon, maxIter, delta, maxInIter):
        return _pyMarmoteMDP.finiteHorizonMDP_policyIterationModified(self, epsilon, maxIter, delta, maxInIter)

    def policyIteration(self, maxIter):
        return _pyMarmoteMDP.finiteHorizonMDP_policyIteration(self, maxIter)

    def policyCost(self, policy, epsilon, maxIter):
        return _pyMarmoteMDP.finiteHorizonMDP_policyCost(self, policy, epsilon, maxIter)

    def getChain(self, policy):
        return _pyMarmoteMDP.finiteHorizonMDP_getChain(self, policy)

# Register finiteHorizonMDP in _pyMarmoteMDP:
_pyMarmoteMDP.finiteHorizonMDP_swigregister(finiteHorizonMDP)

class finiteHorizonDiscountedMDP(genericMDP):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def writeMDP(self):
        return _pyMarmoteMDP.finiteHorizonDiscountedMDP_writeMDP(self)

    def __init__(self, *args):
        _pyMarmoteMDP.finiteHorizonDiscountedMDP_swiginit(self, _pyMarmoteMDP.new_finiteHorizonDiscountedMDP(*args))
    __swig_destroy__ = _pyMarmoteMDP.delete_finiteHorizonDiscountedMDP

    def valueIteration(self, *args):
        return _pyMarmoteMDP.finiteHorizonDiscountedMDP_valueIteration(self, *args)

    def valueIterationGS(self, epsilon, maxIter):
        return _pyMarmoteMDP.finiteHorizonDiscountedMDP_valueIterationGS(self, epsilon, maxIter)

    def policyIterationModified(self, epsilon, maxIter, delta, maxInIter):
        return _pyMarmoteMDP.finiteHorizonDiscountedMDP_policyIterationModified(self, epsilon, maxIter, delta, maxInIter)

    def policyIteration(self, maxIter):
        return _pyMarmoteMDP.finiteHorizonDiscountedMDP_policyIteration(self, maxIter)

    def policyCost(self, policy, epsilon, maxIter):
        return _pyMarmoteMDP.finiteHorizonDiscountedMDP_policyCost(self, policy, epsilon, maxIter)

    def getChain(self, policy):
        return _pyMarmoteMDP.finiteHorizonDiscountedMDP_getChain(self, policy)

# Register finiteHorizonDiscountedMDP in _pyMarmoteMDP:
_pyMarmoteMDP.finiteHorizonDiscountedMDP_swigregister(finiteHorizonDiscountedMDP)

class structuralPropertiesPol(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, st):
        _pyMarmoteMDP.structuralPropertiesPol_swiginit(self, _pyMarmoteMDP.new_structuralPropertiesPol(st))
    __swig_destroy__ = _pyMarmoteMDP.delete_structuralPropertiesPol

    def monotonicityPol(self, *args):
        return _pyMarmoteMDP.structuralPropertiesPol_monotonicityPol(self, *args)

    def monotonicityPolByDim(self, *args):
        return _pyMarmoteMDP.structuralPropertiesPol_monotonicityPolByDim(self, *args)

    def thresholdPol(self, *args):
        return _pyMarmoteMDP.structuralPropertiesPol_thresholdPol(self, *args)

    def sSPol(self, *args):
        return _pyMarmoteMDP.structuralPropertiesPol_sSPol(self, *args)

    def sSPolByDim(self, *args):
        return _pyMarmoteMDP.structuralPropertiesPol_sSPolByDim(self, *args)

    def getDetail(self):
        return _pyMarmoteMDP.structuralPropertiesPol_getDetail(self)

    def avoidDetail(self):
        return _pyMarmoteMDP.structuralPropertiesPol_avoidDetail(self)

# Register structuralPropertiesPol in _pyMarmoteMDP:
_pyMarmoteMDP.structuralPropertiesPol_swigregister(structuralPropertiesPol)

class structuralPropertiesVF(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, st):
        _pyMarmoteMDP.structuralPropertiesVF_swiginit(self, _pyMarmoteMDP.new_structuralPropertiesVF(st))
    __swig_destroy__ = _pyMarmoteMDP.delete_structuralPropertiesVF

    def monotonicityVF(self, *args):
        return _pyMarmoteMDP.structuralPropertiesVF_monotonicityVF(self, *args)

    def monotonicityVFByDim(self, *args):
        return _pyMarmoteMDP.structuralPropertiesVF_monotonicityVFByDim(self, *args)

    def monotonicityCX(self, *args):
        return _pyMarmoteMDP.structuralPropertiesVF_monotonicityCX(self, *args)

    def monotonicityCXByDim(self, *args):
        return _pyMarmoteMDP.structuralPropertiesVF_monotonicityCXByDim(self, *args)

    def getDetail(self):
        return _pyMarmoteMDP.structuralPropertiesVF_getDetail(self)

    def avoidDetail(self):
        return _pyMarmoteMDP.structuralPropertiesVF_avoidDetail(self)

# Register structuralPropertiesVF in _pyMarmoteMDP:
_pyMarmoteMDP.structuralPropertiesVF_swigregister(structuralPropertiesVF)



